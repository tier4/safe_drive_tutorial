// This file was automatically generated by ros2msg_to_rs (https://github.com/tier4/ros2msg_to_rs).
use super::super::*;
use super::super::super::*;
use safe_drive::msg::*;
use safe_drive::rcl;
use safe_drive::msg::common_interfaces::*;

extern "C" {
    fn srvmsg__srv__AddTwoInts_Request__init(msg: *mut AddTwoIntsRequest) -> bool;
    fn srvmsg__srv__AddTwoInts_Request__fini(msg: *mut AddTwoIntsRequest);
    fn srvmsg__srv__AddTwoInts_Request__Sequence__init(msg: *mut AddTwoIntsRequestSeqRaw, size: usize) -> bool;
    fn srvmsg__srv__AddTwoInts_Request__Sequence__fini(msg: *mut AddTwoIntsRequestSeqRaw);
    fn srvmsg__srv__AddTwoInts_Response__init(msg: *mut AddTwoIntsResponse) -> bool;
    fn srvmsg__srv__AddTwoInts_Response__fini(msg: *mut AddTwoIntsResponse);
    fn srvmsg__srv__AddTwoInts_Response__Sequence__init(msg: *mut AddTwoIntsResponseSeqRaw, size: usize) -> bool;
    fn srvmsg__srv__AddTwoInts_Response__Sequence__fini(msg: *mut AddTwoIntsResponseSeqRaw);
    fn rosidl_typesupport_c__get_service_type_support_handle__srvmsg__srv__AddTwoInts() -> *const rcl::rosidl_service_type_support_t;
}


#[repr(C)]
#[derive(Debug)]
pub struct AddTwoIntsRequest {
    pub x: u32,
    pub y: u32,
}

#[repr(C)]
#[derive(Debug)]
pub struct AddTwoIntsResponse {
    pub result: u32,
}

impl AddTwoIntsRequest {
    pub fn new() -> Option<Self> {
        let mut msg: Self = unsafe { std::mem::MaybeUninit::zeroed().assume_init() };
        if unsafe { srvmsg__srv__AddTwoInts_Request__init(&mut msg) } {
            Some(msg)
        } else {
            None
        }
    }
}

impl Drop for AddTwoIntsRequest {
    fn drop(&mut self) {
        unsafe { srvmsg__srv__AddTwoInts_Request__fini(self) };
    }
}

#[repr(C)]
#[derive(Debug)]
struct AddTwoIntsRequestSeqRaw {
    data: *mut AddTwoIntsRequest,
    size: usize,
    capacity: usize,
}

/// Sequence of AddTwoIntsRequest.
/// `N` is the maximum number of elements.
/// If `N` is `0`, the size is unlimited.
#[repr(C)]
#[derive(Debug)]
pub struct AddTwoIntsRequestSeq<const N: usize> {
    data: *mut AddTwoIntsRequest,
    size: usize,
    capacity: usize,
}

impl<const N: usize> AddTwoIntsRequestSeq<N> {
    /// Create a sequence of.
    /// `N` represents the maximum number of elements.
    /// If `N` is `0`, the sequence is unlimited.
    pub fn new(size: usize) -> Option<Self> {
        if N != 0 && size >= N {
            // the size exceeds in the maximum number
            return None;
        }

        let mut msg: AddTwoIntsRequestSeqRaw = unsafe { std::mem::MaybeUninit::zeroed().assume_init() };
        if unsafe { srvmsg__srv__AddTwoInts_Request__Sequence__init(&mut msg, size) } {
            Some(Self {data: msg.data, size: msg.size, capacity: msg.capacity })
        } else {
            None
        }
    }

    pub fn as_slice(&self) -> Option<&[AddTwoIntsRequest]> {
        if self.data.is_null() {
            None
        } else {
            let s = unsafe { std::slice::from_raw_parts(self.data, self.size) };
            Some(s)
        }
    }

    pub fn as_slice_mut(&mut self) -> Option<&mut [AddTwoIntsRequest]> {
        if self.data.is_null() {
            None
        } else {
            let s = unsafe { std::slice::from_raw_parts_mut(self.data, self.size) };
            Some(s)
        }
    }
}

impl<const N: usize> Drop for AddTwoIntsRequestSeq<N> {
    fn drop(&mut self) {
        let mut msg = AddTwoIntsRequestSeqRaw{data: self.data, size: self.size, capacity: self.capacity};
        unsafe { srvmsg__srv__AddTwoInts_Request__Sequence__fini(&mut msg) };
    }
}

unsafe impl<const N: usize> Send for AddTwoIntsRequestSeq<N> {}
unsafe impl<const N: usize> Sync for AddTwoIntsRequestSeq<N> {}


impl AddTwoIntsResponse {
    pub fn new() -> Option<Self> {
        let mut msg: Self = unsafe { std::mem::MaybeUninit::zeroed().assume_init() };
        if unsafe { srvmsg__srv__AddTwoInts_Response__init(&mut msg) } {
            Some(msg)
        } else {
            None
        }
    }
}

impl Drop for AddTwoIntsResponse {
    fn drop(&mut self) {
        unsafe { srvmsg__srv__AddTwoInts_Response__fini(self) };
    }
}

#[repr(C)]
#[derive(Debug)]
struct AddTwoIntsResponseSeqRaw {
    data: *mut AddTwoIntsResponse,
    size: usize,
    capacity: usize,
}

/// Sequence of AddTwoIntsResponse.
/// `N` is the maximum number of elements.
/// If `N` is `0`, the size is unlimited.
#[repr(C)]
#[derive(Debug)]
pub struct AddTwoIntsResponseSeq<const N: usize> {
    data: *mut AddTwoIntsResponse,
    size: usize,
    capacity: usize,
}

impl<const N: usize> AddTwoIntsResponseSeq<N> {
    /// Create a sequence of.
    /// `N` represents the maximum number of elements.
    /// If `N` is `0`, the sequence is unlimited.
    pub fn new(size: usize) -> Option<Self> {
        if N != 0 && size >= N {
            // the size exceeds in the maximum number
            return None;
        }

        let mut msg: AddTwoIntsResponseSeqRaw = unsafe { std::mem::MaybeUninit::zeroed().assume_init() };
        if unsafe { srvmsg__srv__AddTwoInts_Response__Sequence__init(&mut msg, size) } {
            Some(Self {data: msg.data, size: msg.size, capacity: msg.capacity })
        } else {
            None
        }
    }

    pub fn as_slice(&self) -> Option<&[AddTwoIntsResponse]> {
        if self.data.is_null() {
            None
        } else {
            let s = unsafe { std::slice::from_raw_parts(self.data, self.size) };
            Some(s)
        }
    }

    pub fn as_slice_mut(&mut self) -> Option<&mut [AddTwoIntsResponse]> {
        if self.data.is_null() {
            None
        } else {
            let s = unsafe { std::slice::from_raw_parts_mut(self.data, self.size) };
            Some(s)
        }
    }
}

impl<const N: usize> Drop for AddTwoIntsResponseSeq<N> {
    fn drop(&mut self) {
        let mut msg = AddTwoIntsResponseSeqRaw{data: self.data, size: self.size, capacity: self.capacity};
        unsafe { srvmsg__srv__AddTwoInts_Response__Sequence__fini(&mut msg) };
    }
}

unsafe impl<const N: usize> Send for AddTwoIntsResponseSeq<N> {}
unsafe impl<const N: usize> Sync for AddTwoIntsResponseSeq<N> {}


pub struct AddTwoInts;

impl ServiceMsg for AddTwoInts {
    type Request = AddTwoIntsRequest;
    type Response = AddTwoIntsResponse;
    fn type_support() -> *const rcl::rosidl_service_type_support_t {
        unsafe {
            rosidl_typesupport_c__get_service_type_support_handle__srvmsg__srv__AddTwoInts()
        }
    }
}

